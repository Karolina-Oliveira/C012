import threading
import time
import random

# === Configura√ß√µes da simula√ß√£o ===
NUM_SEMAFOROS        = 4       # n√∫mero total de sem√°foros interligados
TEMPO_SIMULACAO      = 30.0    # dura√ß√£o total da simula√ß√£o (segundos)
TEMPO_VERDE          = 3.0     # tempo que cada sem√°foro permanece VERDE (segundos)
INTERVALO_TICK       = 0.3     # intervalo entre tentativas de liberar carro (segundos)
PROBABILIDADE_LIB    = 0.2     # probabilidade de liberar um carro em cada tick (0.0 a 1.0)
JANELA_COLISAO       = 0.3     # janela extra para considerar colis√£o (segundos)

# Vari√°veis de controle da simula√ß√£o
semaforo_verde_atual = 1                  # ID do sem√°foro que est√° com sinal VERDE
evento_simulacao     = threading.Event()  # Evento para sinalizar t√©rmino ou acidente

# Estruturas para coleta de estat√≠sticas
dicionario_valores = range(1, NUM_SEMAFOROS+1)
carros_liberados     = {i: 0 for i in dicionario_valores}  # total de carros liberados por sem√°foro
tempos_liberacao     = {i: [] for i in dicionario_valores}  # timestamps de cada libera√ß√£o
contagens_liberacao  = {i: 0 for i in dicionario_valores}  # contador sequencial de IDs de carros
semaforos_acidente   = set()                                  # sem√°foros envolvidos em colis√£o

# Lista de tuplas representando carros em travessia:
# (id_carro, tempo_fim_travessia, momento_liberacao, id_semaforo)
carros_atuais        = []


def trabalhador_semaforo(id_semaforo):
    """
    Fun√ß√£o executada por cada thread de sem√°foro.
    Espera sua vez de ficar VERDE, libera carros aleatoriamente,
    detecta poss√≠veis colis√µes e sinaliza fim da simula√ß√£o.
    """
    global semaforo_verde_atual

    # Loop principal: continua enquanto a simula√ß√£o n√£o terminar
    while not evento_simulacao.is_set():
        # Aguarda o sem√°foro ficar VERDE para este ID
        while semaforo_verde_atual != id_semaforo and not evento_simulacao.is_set():
            time.sleep(0.01)  # breve pausa para evitar busy-wait intenso
        # Se a simula√ß√£o foi sinalizada para encerrar, sai da thread
        if evento_simulacao.is_set():
            return

        # In√≠cio do per√≠odo VERDE deste sem√°foro
        print(f"\n[S{id_semaforo}] ‚Äî VERDE ({TEMPO_VERDE:.0f}s)")
        inicio_verde = time.time()
        fim_verde    = inicio_verde + TEMPO_VERDE

        # Durante o tempo VERDE, a cada tick tenta liberar um carro
        while time.time() < fim_verde and not evento_simulacao.is_set():
            time.sleep(INTERVALO_TICK)
            agora = time.time()
            # Se acabou o tempo VERDE, interrompe o loop
            if agora >= fim_verde:
                break

            # Decide aleatoriamente se libera um carro neste instante
            if random.random() < PROBABILIDADE_LIB:
                tempo_no_verde = agora - inicio_verde

                # Atualiza contador e gera ID √∫nico pro carro
                contagens_liberacao[id_semaforo] += 1
                id_carro = f"carro{contagens_liberacao[id_semaforo]}_s{id_semaforo}"
                carros_liberados[id_semaforo] += 1
                tempos_liberacao[id_semaforo].append(agora)

                # Calcula tempo de travessia e agenda remo√ß√£o desse carro
                tempo_travessia = NUM_SEMAFOROS - id_semaforo + 2  # ex: carros de sem√°foro 1 demoram mais
                fim_travessia   = agora + tempo_travessia
                carros_atuais.append((id_carro, fim_travessia, agora, id_semaforo))

                # Imprime estado atual da rua ap√≥s libera√ß√£o
                estados = [(c, f"{agora - tl:.2f}s") for c, _, tl, _ in carros_atuais]
                print(f"  ‚Ä¢ S{id_semaforo} liberou {id_carro} em {tempo_no_verde:.2f}s do verde. Rua:", estados)

                # Verifica colis√£o com o sem√°foro anterior
                sema_ante = id_semaforo - 1
                if sema_ante >= 1:
                    envolvidos = []
                    tempo_ate_anterior = 1 + abs(id_semaforo - sema_ante)
                    # Percorre carros atuais buscando aqueles do sem√°foro anterior
                    for c, _, tl, sid in carros_atuais:
                        if sid == sema_ante:
                            delta = agora - tl
                            # Se estiver dentro da janela de colis√£o
                            if tempo_ate_anterior <= delta <= tempo_ate_anterior + JANELA_COLISAO:
                                envolvidos.append(c)
                    # Se houve colis√£o, sinaliza e encerra simula√ß√£o
                    if envolvidos:
                        envolvidos.append(id_carro)
                        semaforos_acidente.update({sema_ante, id_semaforo})
                        print("üí• ACIDENTE! Sem√°foros envolvidos:", sorted(semaforos_acidente))
                        print("  ‚Ä¢ Carros envolvidos:", envolvidos)
                        evento_simulacao.set()
                        return

        # Fim do periodo VERDE: imprime VERMELHO e passa a vez
        print(f"[S{id_semaforo}] ‚Äî VERMELHO")
        semaforo_verde_atual = (id_semaforo % NUM_SEMAFOROS) + 1


# === Inicializa√ß√£o das threads de sem√°foros ===
threads = []
for s in range(1, NUM_SEMAFOROS+1):
    t = threading.Thread(target=trabalhador_semaforo, args=(s,), daemon=True)
    t.start()
    threads.append(t)

# === Loop principal controla dura√ß√£o da simula√ß√£o ===
inicio_sim = time.time()
while time.time() - inicio_sim < TEMPO_SIMULACAO and not evento_simulacao.is_set():
    time.sleep(0.2)
# Sinaliza t√©rmino da simula√ß√£o (tempo esgotado ou acidente)
evento_simulacao.set()

# Aguarda todas as threads de sem√°foro terminarem
for t in threads:
    t.join()

# === P√≥s-simula√ß√£o: esvaziamento final e relat√≥rio ===
print("\nEsvaziando rua restante‚Ä¶")
agora = time.time()
for c, fim, _, _ in carros_atuais:
    if fim > agora:
        print(f"  ‚Ä¢ Carro {c} removido (tarde).")

print("\n=== SIMULA√á√ÉO ENCERRADA ===")
# Exibe quantos carros cada sem√°foro liberou
for sid, cnt in carros_liberados.items():
    print(f"  S{sid}: {cnt}")
# Indica se houve acidente e quais sem√°foros foram afetados
if semaforos_acidente:
    print("Sem√°foros no acidente:", sorted(semaforos_acidente))
else:
    print("Nenhum acidente ocorreu.")
